[{"term":"value","definition":"1) cannot be simplified further\n2) and belong exclusively to some type"},{"term":"type","definition":"defining shape of data, describes a set of valid values which follow a set of restrictions"},{"term":"operator","definition":"describe computations which can be performed on a set number of values of a given type"},{"term":"boolean","definition":"represents the logical value true or false"},{"term":"integer","definition":"whole number between approximately -2 and 2 billion"},{"term":"unsigned int","definition":"positive whole number which is a value between 0 and roughly 4 billion"},{"term":"addition overflow","definition":"if the sum > int.MaxValue, overflow occurs, wrapping around to int.MinValue"},{"term":"subtraction underflow","definition":"if the difference < int.MinValue, underflow occurs, wrapping around to int.MaxValue"},{"term":"char","definition":"16-bit value type representing a single text character with a value between 0 and 65,535."},{"term":"character addition","definition":"Add:(char,int)→int returns the numeric result of adding a character's code and an integer\nResult is always an integer\nOriginal character is unchanged\nCommon to cast result back to char"},{"term":"ASCII character codes","definition":"65-90: Uppercase A-Z\n97-122: Lowercase a-z\n48-57: Digits 0-9\n'C' - 'A' returns 2\n'a' - 32 returns 'A' lowercase to uppercase\n'Z' + 32 returns 'z' uppercase to lowercase"},{"term":"String","definition":"indexed immutable collection of characters.\nFixed length once created\nZero-based indexing\nAlways uses double quotes"},{"term":"string concatenation","definition":"Concat:(string,string)→string returns a new string containing all characters from both inputs in order\nCreates new string\nOriginal strings unchanged\nLength is sum of input lengths"},{"term":"ToUpper() method","definition":"ToUpper:string→string returns a new string with all characters converted to uppercase\nCreates new string\nOriginal string unchanged\nNon-letters remain unchanged\nCulture-aware for international characters"},{"term":"ToLower() method","definition":"ToLower:string→string returns a new string with all characters converted to lowercase\nCreates new string\nOriginal string unchanged\nNon-letters remain unchanged\nCulture-aware for international characters"},{"term":"length property","definition":"Length:string→int returns the number of characters in the string\n\"Cat\".Length // 3\n\"\".Length // 0 (empty string)"},{"term":"boolean NOT","definition":"NOT:Bool→Bool is the logical negation operator. It flips true to false, and vice versa. Represented by ! in C#."},{"term":"boolean AND","definition":"AND:(Bool,Bool)→Bool returns true when both operands are true. Otherwise it returns false. Represented by && in C#."},{"term":"boolean OR","definition":"OR:(Bool,Bool)→Bool returns true when either operand is true. Otherwise, it returns false. Represented by || in C#."},{"term":"addition","definition":"Add:(int,int)→int returns the sum of two integers."},{"term":"subtraction","definition":"Subtract:(int,int)→int returns the difference between two integers."},{"term":"multiplication","definition":"Multiply:(int,int)→int returns the product of two integers."},{"term":"integer division","definition":"Divide:(int,int)→int returns the quotient of two integers, discarding any remainder."},{"term":"modulo","definition":"Mod:(int,int)→int returns the remainder of a division between two integers."},{"term":"variable","definition":"reserved space in memory used to store a value of some type."},{"term":"type safety","definition":"The guarantee that operations will behave consistently based on their types, preventing unexpected bugs and crashes."},{"term":"program state","definition":"set of bindings at a given point of execution."},{"term":"program scope","definition":"hold boundaries of code, with a defined start and end, where any new entries to the programs state are cleared once execution crosses the end."},{"term":"expression","definition":"set of operators and/or entities which combine to evaluate to a single value."},{"term":"assignment","definition":"Before we assign or bind a value to a variable, the expression is fully evaluated."},{"term":"if statement","definition":"branching structure which contains a sequence of scopes with associated conditions. The only scope entered is the first sequence whose condition is met."},{"term":"loops","definition":"A loop is a control structure that repeats a block of code while a specified condition remains true. Every loop consists of:\nAn initial state\nA condition\nAn iteration step"},{"term":"accumulation pattern","definition":"An accumulation loop maintains a running total or result that is updated throughout the execution of the loop. It involves:\nAn accumulator, initialized before the loop\nA loop that updates the accumulator"},{"term":"search pattern","definition":"A search loop continues until either:\nThe desired item is found (success case)\nWe've checked everything and confirmed it's not there (failure case)"},{"term":"input validation loop","definition":"An input validation loop repeatedly:\nPrompts for input\nChecks if the input is valid\nContinues only if the input was invalid"},{"term":"loop state","definition":"The state of a loop consists of all variables that:\nControl the loop's execution (loop variables)\nAccumulate results during the loop (accumulators)\nTrack the loop's progress (flags and counters)"},{"term":"loop conditions","definition":"A precondition is what must be true before a loop begins\nA postcondition is what must be true after the loop completes"},{"term":"nested loop","definition":"A nested loop is a loop that contains another loop within its body. The inner loop completes all its iterations for each single iteration of the outer loop."},{"term":"loop control statements","definition":"break immediately exits the loop entirely\ncontinue skips the rest of the current iteration and moves to the next one"},{"term":"for loops","definition":"Initialization (starting state)\nCondition (when to stop)\nIteration (how to update)\nThe variable defined in the initialization is only accessible within the loop's scope."},{"term":"array","definition":"ordered collection of elements which share a type. An array has a fixed size which cannot be changed, and each element has an index which it can be accessed with."},{"term":"2D array","definition":"ordered collection of elements which share a type, arranged in rows and columns. It has a fixed number of rows and columns which cannot be changed, and each element has a pair of indices [row, column] with which it can be accessed."},{"term":"linked list","definition":"ordered collection of nodes where each node contains (1) a value of some type and (2) a reference to the next node. A linked list has a dynamic size which can grow or shrink during execution, and nodes must be accessed sequentially from the first node."},{"term":"class","definition":"A class is a user-defined type that serves as a blueprint for creating objects, specifying both the data (fields) and operations (methods) that characterize all objects of that type."},{"term":"object","definition":"An object is a specific instance of a class that exists in memory during program execution, with its own unique state and the ability to perform the behaviors defined by its class."},{"term":"method","definition":"A method is a function defined within a class that performs operations related to that class, often accessing or modifying the object's fields."},{"term":"constructor","definition":"A constructor is a special method that has the same name as the class and is executed automatically when a new object is created. Its purpose is to initialize the object's state. Constructors have no return type (not even void) and are called implicitly when using the new keyword."},{"term":"encapsulation","definition":"Encapsulation is a principle of bundling data (fields) and the methods that operate on that data within a single unit (the class), and restricting direct access to some of the object's components (typically the fields). This principle is implemented by making fields private and providing public methods or properties to access and modify them in a controlled way."},{"term":"getters and setters","definition":"Getter methods provide controlled read access to private fields, while setter methods provide controlled write access to private fields, often including validation logic."},{"term":"generics","definition":"Generics allow you to define classes, interfaces, and methods with placeholder types (type parameters) that are specified only when the generic type or method is actually used. This enables type-safe code reuse across different data types. Generics use type parameters (conventionally named T, U, TKey, TValue, etc.) enclosed in angle brackets (<>) as placeholders for actual types that will be provided later."},{"term":"nullable reference types","definition":"Nullable reference types are a C# feature (enabled at the project level or via directives) that changes the default assumption: reference types are considered non-nullable unless explicitly marked otherwise. This helps prevent null reference exceptions by making potential nulls explicit and enabling compiler warnings. Using the ? suffix on a reference type indicates that the variable is allowed to be null."}]